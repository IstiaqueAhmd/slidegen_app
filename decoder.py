page  = """PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICA8dGl0bGU+VW5kZXJzdGFuZGluZyBHbG9iYWwgV2FybWluZzwvdGl0bGU+CiAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLnRhaWx3aW5kY3NzLmNvbSI+PC9zY3JpcHQ+CiAgPGxpbmsgaHJlZj0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9oZXJvaWNvbnNAMi4wLjE2L291dGxpbmUvaWNvbnMuY3NzIiByZWw9InN0eWxlc2hlZXQiPgo8L2hlYWQ+Cjxib2R5IGNsYXNzPSJiZy1ncmF5LTEwMCI+CiAgPGRpdiBjbGFzcz0ic2xpZGUtY29udGFpbmVyIGgtWzUwMHB4XSBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBwLTgiPgogICAgPGRpdiBjbGFzcz0iY29udGVudC1mcmFtZSB3LWZ1bGwgbWF4LXctNHhsIGgtZnVsbCBiZy1ncmFkaWVudC10by1iciBmcm9tLWJsdWUtNTAgdG8tY3lhbi0xMDAgcm91bmRlZC0zeGwgc2hhZG93LXhsIHAtOCBmbGV4IGZsZXgtY29sIj4KICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgbWItOCI+CiAgICAgICAgPGgxIGNsYXNzPSJ0ZXh0LTV4bCBmb250LWJvbGQgdGV4dC1jeWFuLTgwMCBtYi00IGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIj4KICAgICAgICAgIDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBmaWxsPSJub25lIiB2aWV3Qm94PSIwIDAgMjQgMjQiIHN0cm9rZS13aWR0aD0iMS41IiBzdHJva2U9ImN1cnJlbnRDb2xvciIgY2xhc3M9InctMTYgaC0xNiBtci00IHRleHQtYW1iZXItNTAwIj4KICAgICAgICAgICAgPHBhdGggc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIiBkPSJNMTUuMzYyIDUuMjE0QTguMjUyIDguMjUyIDAgMDExMiAyMSA4LjI1IDguMjUgMCAwMTYuMDM4IDcuMDQ4IDguMjg3IDguMjg3IDAgMDA5IDkuNmE4Ljk4MyA4Ljk4MyAwIDAxMy4zNjEtNi44NjcgOC4yMSA4LjIxIDAgMDAzIDIuNDh6IiAvPgogICAgICAgICAgICA8cGF0aCBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIGQ9Ik0xMiAxOGEzLjc1IDMuNzUgMCAwMC40OTUtNy40NjcgNS45OSA1Ljk5IDAgMDAtMS45MjUgMy41NDYgNS45NzQgNS45NzQgMCAwMS0yLjEzMy0xQTMuNzUgMy43NSAwIDAwMTIgMTh6IiAvPgogICAgICAgICAgPC9zdmc+CiAgICAgICAgICBVbmRlcnN0YW5kaW5nIEdsb2JhbCBXYXJtaW5nCiAgICAgICAgPC9oMT4KICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJncmlkIGdyaWQtY29scy0yIGdhcC04IGZsZXgtZ3JvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iYmctd2hpdGUvODAgYmFja2Ryb3AtYmx1ci1zbSByb3VuZGVkLXhsIHAtNiBzaGFkb3ctbWQgZmxleCBpdGVtcy1zdGFydCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJiZy1jeWFuLTEwMCBwLTMgcm91bmRlZC1mdWxsIG1yLTQiPgogICAgICAgICAgICA8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDI0IDI0IiBzdHJva2Utd2lkdGg9IjEuNSIgc3Ryb2tlPSJjdXJyZW50Q29sb3IiIGNsYXNzPSJ3LTggaC04IHRleHQtY3lhbi03MDAiPgogICAgICAgICAgICAgIDxwYXRoIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCIgZD0iTTIuMjUgMThMOSAxMS4yNWw0LjMwNiA0LjMwN2ExMS45NSAxMS45NSAwIDAxNS44MTQtNS41MTlsMi43NC0xLjIybTAgMGwtNS45NC0yLjI4bTUuOTQgMi4yOGwtMi4yOCA1Ljk0MSIgLz4KICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXhsIHRleHQtZ3JheS04MDAiPkdyYWR1YWwgaW5jcmVhc2UgaW4gRWFydGgncyBhdmVyYWdlIHN1cmZhY2UgdGVtcGVyYXR1cmU8L3A+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImJnLXdoaXRlLzgwIGJhY2tkcm9wLWJsdXItc20gcm91bmRlZC14bCBwLTYgc2hhZG93LW1kIGZsZXggaXRlbXMtc3RhcnQiPgogICAgICAgICAgPGRpdiBjbGFzcz0iYmctYW1iZXItMTAwIHAtMyByb3VuZGVkLWZ1bGwgbXItNCI+CiAgICAgICAgICAgIDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBmaWxsPSJub25lIiB2aWV3Qm94PSIwIDAgMjQgMjQiIHN0cm9rZS13aWR0aD0iMS41IiBzdHJva2U9ImN1cnJlbnRDb2xvciIgY2xhc3M9InctOCBoLTggdGV4dC1hbWJlci03MDAiPgogICAgICAgICAgICAgIDxwYXRoIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCIgZD0iTTE1IDE5LjEyOGE5LjM4IDkuMzggMCAwMDIuNjI1LjM3MiA5LjMzNyA5LjMzNyAwIDAwNC4xMjEtLjk1MiA0LjEyNSA0LjEyNSAwIDAwLTcuNTMzLTIuNDkzTTE1IDE5LjEyOHYtLjAwM2MwLTEuMTEzLS4yODUtMi4xNi0uNzg2LTMuMDdNMTUgMTkuMTI4di4xMDZBMTIuMzE4IDEyLjMxOCAwIDAxOC42MjQgMjFjLTIuMzMxIDAtNC41MTItLjY0NS02LjM3NC0xLjc2NmwtLjAwMS0uMTA5YTYuMzc1IDYuMzc1IDAgMDExMS45NjQtMy4wN00xMiA2LjM3NWEzLjM3NSAzLjM3NSAwIDExLTYuNzUgMCAzLjM3NSAzLjM3NSAwIDAxNi43NSAwem04LjI1IDIuMjVhMi42MjUgMi42MjUgMCAxMS01LjI1IDAgMi42MjUgMi42MjUgMCAwMTUuMjUgMHoiIC8+CiAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8cCBjbGFzcz0idGV4dC14bCB0ZXh0LWdyYXktODAwIj5QcmltYXJpbHkgY2F1c2VkIGJ5IGh1bWFuIGFjdGl2aXRpZXM8L3A+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImJnLXdoaXRlLzgwIGJhY2tkcm9wLWJsdXItc20gcm91bmRlZC14bCBwLTYgc2hhZG93LW1kIGZsZXggaXRlbXMtc3RhcnQiPgogICAgICAgICAgPGRpdiBjbGFzcz0iYmctZW1lcmFsZC0xMDAgcC0zIHJvdW5kZWQtZnVsbCBtci00Ij4KICAgICAgICAgICAgPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIGZpbGw9Im5vbmUiIHZpZXdCb3g9IjAgMCAyNCAyNCIgc3Ryb2tlLXdpZHRoPSIxLjUiIHN0cm9rZT0iY3VycmVudENvbG9yIiBjbGFzcz0idy04IGgtOCB0ZXh0LWVtZXJhbGQtNzAwIj4KICAgICAgICAgICAgICA8cGF0aCBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIGQ9Ik0xMiAxNi41VjkuNzVtMCAwbDMgM20tMy0zbC0zIDNNNi43NSAxOS41YTQuNSA0LjUgMCAwMS0xLjQxLTguNzc1IDUuMjUgNS4yNSAwIDAxMTAuMjMzLTIuMzMgMyAzIDAgMDEzLjc1OCAzLjg0OEEzLjc1MiAzLjc1MiAwIDAxMTggMTkuNUg2Ljc1eiIgLz4KICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXhsIHRleHQtZ3JheS04MDAiPkdyZWVuaG91c2UgZ2FzIGVtaXNzaW9ucyB0cmFwIGV4Y2VzcyBoZWF0PC9wPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJiZy13aGl0ZS84MCBiYWNrZHJvcC1ibHVyLXNtIHJvdW5kZWQteGwgcC02IHNoYWRvdy1tZCBmbGV4IGl0ZW1zLXN0YXJ0Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImJnLXJvc2UtMTAwIHAtMyByb3VuZGVkLWZ1bGwgbXItNCI+CiAgICAgICAgICAgIDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiBmaWxsPSJub25lIiB2aWV3Qm94PSIwIDAgMjQgMjQiIHN0cm9rZS13aWR0aD0iMS41IiBzdHJva2U9ImN1cnJlbnRDb2xvciIgY2xhc3M9InctOCBoLTggdGV4dC1yb3NlLTcwMCI+CiAgICAgICAgICAgICAgPHBhdGggc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIiBkPSJNMy43NSAxMy41bDEwLjUtMTEuMjVMMTIgMTAuNWg4LjI1TDkuNzUgMjEuNzUgMTIgMTMuNUgzLjc1eiIgLz4KICAgICAgICAgICAgPC9zdmc+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LXhsIHRleHQtZ3JheS04MDAiPkN1cnJlbnQgbGV2ZWxzIHVucHJlY2VkZW50ZWQgaW4gaHVtYW4gaGlzdG9yeTwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+"""

base512_alphabet = [chr(i) for i in range(0x0100, 0x0300)]  # U+0100 to U+02FF

def decode_base512(encoded: str) -> bytes:
    reverse_map = {ch: i for i, ch in enumerate(base512_alphabet)}

    # Convert each character to 9-bit binary
    bit_str = ''.join(f'{reverse_map[ch]:09b}' for ch in encoded)

    # Split into 8-bit chunks
    byte_chunks = [bit_str[i:i+8] for i in range(0, len(bit_str), 8)]

    # Remove padding and convert to bytes
    return bytes(int(chunk, 2) for chunk in byte_chunks if '1' in chunk)


print(decode_base512(page))